/**
 * Supabase Export Generator
 * Generates one-click deployment links and commands for Supabase schemas
 * Enables users to easily import schemas into their Supabase dashboard with simple copy-paste instructions
 */

require('dotenv').config();

/**
 * Encodes SQL for safe URL transmission
 * @param {string} sql - The SQL string to encode
 * @returns {string} URL-encoded SQL string
 */
function encodeSQLForURL(sql) {
    return encodeURIComponent(sql);
}

/**
 * Generates a shareable SQL snippet for Supabase dashboard
 * @param {string} sql - The SQL to format
 * @returns {string} Formatted SQL with comments and instructions
 */
function formatSQLForDashboard(sql) {
    const timestamp = new Date().toISOString().split('T')[0];
    const formattedSQL = `-- Generated by Stellar Idea Forge - ${timestamp}
-- Copy and paste this SQL into your Supabase SQL Editor
-- Navigate to: Project Dashboard > SQL Editor > New Query

${sql}

-- After running the SQL, you can:
-- 1. View your new table in the Table Editor
-- 2. Set up Row Level Security (RLS) policies
-- 3. Create API endpoints automatically
-- 4. Add real-time subscriptions if needed

-- 🚀 Your table is ready for development!`;

    return formattedSQL;
}

/**
 * Generates Supabase dashboard URL for SQL execution
 * @param {string} projectId - Supabase project ID (can be mock for demo)
 * @param {string} sql - SQL to execute
 * @returns {string} Direct dashboard URL
 */
function generateDashboardURL(projectId, sql) {
    const encodedSQL = encodeSQLForURL(sql);
    return `https://supabase.com/dashboard/project/${projectId}/sql?sql=${encodedSQL}`;
}

/**
 * Generates CLI commands for schema deployment
 * @param {string} sql - SQL to deploy
 * @param {string} migrationName - Name for the migration
 * @returns {object} CLI commands and instructions
 */
function generateCLICommands(sql, migrationName = 'create_initial_schema') {
    const commands = {
        createMigration: `supabase migration new ${migrationName}`,
        deployLocal: `supabase db reset`,
        deployRemote: `supabase db push`,
        status: `supabase migration list`
    };

    const instructions = [
        "1. 🏗️ Instala Supabase CLI: npm install -g supabase",
        "2. 🔑 Conecta tu proyecto: supabase login",
        "3. 📁 Inicializa en tu directorio: supabase init",
        "4. ✨ Crea migración: " + commands.createMigration,
        "5. 📋 Copia el SQL al archivo creado en supabase/migrations/",
        "6. 🚀 Aplica cambios: " + commands.deployRemote
    ];

    return {
        commands,
        instructions,
        sqlContent: sql,
        migrationFileName: `supabase/migrations/${Date.now()}_${migrationName}.sql`
    };
}

/**
 * Creates step-by-step visual instructions for non-technical users
 * @param {string} method - Deployment method ('dashboard' or 'cli')
 * @param {string} deployLink - The deployment link or primary command
 * @returns {array} Array of instruction steps with emojis
 */
function createUserInstructions(method, deployLink) {
    if (method === 'dashboard') {
        return [
            "🎯 **Método Dashboard (Más Fácil)**",
            "",
            "**Paso 1:** 🌐 Abre tu proyecto Supabase",
            "👉 Ve a: https://supabase.com/dashboard",
            "",
            "**Paso 2:** ⚡ Accede al Editor SQL",
            "👉 Click en 'SQL Editor' en el menú lateral",
            "👉 Click en 'New Query'",
            "",
            "**Paso 3:** 📋 Copia y pega el SQL",
            "👉 Copia todo el código SQL de abajo",
            "👉 Pégalo en el editor",
            "",
            "**Paso 4:** 🚀 Ejecuta el comando",
            "👉 Click en 'Run' o presiona Ctrl+Enter",
            "👉 ¡Tu tabla estará lista en segundos!",
            "",
            "**Paso 5:** ✅ Verifica tu tabla",
            "👉 Ve a 'Table Editor' para ver tu nueva tabla",
            "👉 Ya puedes empezar a usar tu base de datos"
        ];
    } else {
        return [
            "🛠️ **Método CLI (Para Desarrolladores)**",
            "",
            "**Paso 1:** ⚙️ Instala Supabase CLI",
            "👉 Ejecuta: `npm install -g supabase`",
            "",
            "**Paso 2:** 🔐 Conecta tu cuenta",
            "👉 Ejecuta: `supabase login`",
            "👉 Autoriza en el navegador",
            "",
            "**Paso 3:** 📁 Inicializa proyecto",
            "👉 En tu directorio: `supabase init`",
            "",
            "**Paso 4:** 📝 Crea migración",
            "👉 Ejecuta: `supabase migration new create_schema`",
            "",
            "**Paso 5:** 📋 Agrega el SQL",
            "👉 Copia el SQL al archivo creado en supabase/migrations/",
            "",
            "**Paso 6:** 🚀 Despliega",
            "👉 Ejecuta: `supabase db push`"
        ];
    }
}

/**
 * Main function to generate deployment link and instructions
 * @param {object} schemaJson - Schema JSON from supabaseSchemaGenerator
 * @param {object} options - Configuration options
 * @returns {object} Deployment information with links, commands, and instructions
 */
function generateDeployLink(schemaJson, options = {}) {
    console.log('🔗 Generating one-click deployment options...');
    
    try {
        // Validate input schema
        if (!schemaJson || !schemaJson.schema || !schemaJson.schema.sql) {
            throw new Error('Invalid schema JSON provided');
        }

        // Extract SQL and metadata
        const sql = schemaJson.schema.sql;
        const metadata = schemaJson.schema.metadata || {};
        const tables = schemaJson.schema.tables || [];
        
        // Configuration with defaults
        const config = {
            projectId: options.projectId || process.env.SUPABASE_PROJECT_ID || 'demo-project-123',
            method: options.method || 'both', // 'dashboard', 'cli', or 'both'
            includeRLS: options.includeRLS || false,
            includeSampleData: options.includeSampleData || false,
            ...options
        };

        // Generate formatted SQL for dashboard
        const formattedSQL = formatSQLForDashboard(sql);
        
        // Generate dashboard deployment URL
        const dashboardURL = generateDashboardURL(config.projectId, formattedSQL);
        
        // Generate CLI commands and instructions
        const cliInfo = generateCLICommands(sql, `create_${tables[0]?.name || 'schema'}`);
        
        // Create user-friendly instructions
        const dashboardInstructions = createUserInstructions('dashboard', dashboardURL);
        const cliInstructions = createUserInstructions('cli', cliInfo.commands.deployRemote);

        // Generate the complete export result
        const exportResult = {
            deployLink: dashboardURL,
            instructions: "🚀 **¡Despliega tu esquema en 1 click!** Elige tu método favorito abajo 👇",
            
            // Dashboard method (recommended for non-technical users)
            dashboard: {
                url: dashboardURL,
                quickLink: `https://supabase.com/dashboard/project/${config.projectId}/sql`,
                sql: formattedSQL,
                instructions: dashboardInstructions,
                title: "📊 Método Dashboard (Recomendado)"
            },
            
            // CLI method (for developers)
            cli: {
                commands: cliInfo.commands,
                migrationFile: cliInfo.migrationFileName,
                sql: sql,
                instructions: cliInstructions,
                title: "💻 Método CLI (Para Desarrolladores)"
            },
            
            // Quick copy-paste sections
            quickActions: {
                copySQL: {
                    title: "📋 SQL para copiar y pegar:",
                    content: formattedSQL,
                    instruction: "Copia este SQL y pégalo en el SQL Editor de tu dashboard de Supabase"
                },
                copyCommands: {
                    title: "⚡ Comandos CLI:",
                    content: Object.values(cliInfo.commands).join('\n'),
                    instruction: "Ejecuta estos comandos en tu terminal (requiere Supabase CLI instalado)"
                }
            },
            
            // Metadata and validation
            metadata: {
                generatedAt: new Date().toISOString(),
                schemaHash: Buffer.from(sql).toString('base64').substring(0, 8),
                tableCount: tables.length,
                tableName: tables[0]?.name || 'unknown',
                projectId: config.projectId,
                sqlLength: sql.length,
                deploymentMethods: ['dashboard', 'cli'],
                isTestMode: config.projectId.includes('demo') || config.projectId.includes('test')
            },
            
            // Validation and next steps
            nextSteps: [
                "✅ Ejecuta el SQL en tu proyecto Supabase",
                "🔒 Configura Row Level Security (RLS) policies",
                "🌐 Prueba los endpoints de API automáticos",
                "📱 Conecta desde tu aplicación frontend",
                "🔄 Agrega suscripciones en tiempo real si necesitas"
            ],
            
            // Troubleshooting tips
            troubleshooting: {
                "Error de sintaxis SQL": "Verifica que copiaste todo el código SQL completo",
                "Proyecto no encontrado": "Asegúrate de estar en el proyecto correcto de Supabase",
                "Permisos insuficientes": "Verifica que tienes permisos de administrador en el proyecto",
                "CLI no reconocido": "Instala Supabase CLI con: npm install -g supabase"
            }
        };

        console.log('✅ Export options generated successfully');
        console.log(`📊 Dashboard URL: ${dashboardURL.substring(0, 60)}...`);
        console.log(`💻 CLI commands ready for table: ${tables[0]?.name || 'unknown'}`);
        
        return exportResult;

    } catch (error) {
        console.error('❌ Error generating deployment link:', error);
        
        return {
            error: {
                message: error.message,
                type: 'export_generation_error'
            },
            deployLink: null,
            instructions: "❌ Error generando opciones de despliegue. Verifica que el esquema JSON sea válido.",
            fallback: {
                manualInstructions: [
                    "1. 🌐 Ve a tu dashboard de Supabase",
                    "2. ⚡ Click en 'SQL Editor'",
                    "3. 📋 Copia y pega tu SQL manualmente",
                    "4. 🚀 Ejecuta con 'Run'"
                ]
            }
        };
    }
}

/**
 * Helper function to validate export result
 * @param {object} exportResult - Generated export result
 * @returns {boolean} True if export result is valid
 */
function validateExportResult(exportResult) {
    if (!exportResult) return false;
    if (exportResult.error) return false;
    if (!exportResult.deployLink) return false;
    if (!exportResult.dashboard || !exportResult.cli) return false;
    if (!exportResult.dashboard.sql || !exportResult.cli.sql) return false;
    
    return true;
}

/**
 * Demo function to show export generation with sample schemas
 */
function demonstrateExportGeneration() {
    console.log('\n🧪 Demonstrating Export Generation...\n');
    
    // Sample schema (mimicking output from supabaseSchemaGenerator)
    const sampleSchema = {
        schema: {
            tables: [{
                name: "users",
                displayName: "Users",
                fields: [
                    { name: "id", isPrimaryKey: true },
                    { name: "email", isRequired: true },
                    { name: "wallet_address" }
                ]
            }],
            sql: "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    email TEXT NOT NULL,\n    wallet_address TEXT\n);",
            metadata: {
                generatedAt: new Date().toISOString(),
                context: "hybrid_recommendation"
            }
        }
    };

    console.log('--- Sample Export Generation ---');
    const exportResult = generateDeployLink(sampleSchema);
    
    console.log('\n📊 Dashboard URL:', exportResult.deployLink);
    console.log('\n💻 CLI Command:', exportResult.cli?.commands?.deployRemote);
    console.log('\n📋 Instructions Preview:');
    console.log(exportResult.dashboard?.instructions?.slice(0, 3).join('\n'));
    console.log('\n✅ Export generation completed!');
    
    return exportResult;
}

// Export the main functions and utilities
module.exports = {
    generateDeployLink,
    validateExportResult,
    demonstrateExportGeneration,
    encodeSQLForURL,
    formatSQLForDashboard,
    createUserInstructions
};

// If this file is run directly, demonstrate the functionality
if (require.main === module) {
    demonstrateExportGeneration();
}